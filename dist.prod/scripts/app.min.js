angular.module("healthyGulpAngularApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"components/home.html"})}]),angular.module("healthyGulpAngularApp").directive("demoComponent",[function(){return{restrict:"AE",templateUrl:"components/demoComponent/demoComponent.html",controller:"DemoComponentController",controllerAs:"vm",bindToController:!0}}]),function(){"use strict";angular.module("healthyGulpAngularApp").controller("DemoComponentController",function(e){function n(n){function t(e){a.messages.push(e.data),a.availableOptions=l}function o(e){console.log(e)}a.messages.push(n),e.post("/donalbot",{data:n}).then(t,o),a.inputMessage=""}function t(e){a.messages.push(e),a.inputMessage="",a.availableOptions=[]}function o(){a.messages=[]}var a=this,l=["Option1","Option2","Option3"];return a.sendMessage=n,a.clearMessages=o,a.sendChosenOption=t,a.messages=[],a.availableOptions=[],a})}(),function(e){try{e=angular.module("healthyGulpAngularApp")}catch(n){e=angular.module("healthyGulpAngularApp",[])}e.run(["$templateCache",function(e){e.put("components/demoComponent/demoComponent.html",'<p ng-repeat="message in vm.messages">{{message}}</p><form novalidate class="simple-form"><input type="text" ng-model="vm.inputMessage"><br><button ng-repeat="availableOption in vm.availableOptions" ng-click="vm.sendChosenOption(availableOption)">{{availableOption}}</button> <input type="submit" ng-click="vm.sendMessage(vm.inputMessage)" ng-disabled="!vm.inputMessage" value="Send"></form><button ng-click="vm.clearMessages()">Clear Screen</button>')}])}(),function(e){try{e=angular.module("healthyGulpAngularApp")}catch(n){e=angular.module("healthyGulpAngularApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html","<p></p><div demo-component></div><p></p>")}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbXBvbmVudHMvZGVtb0NvbXBvbmVudC9kZW1vQ29tcG9uZW50RGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9kZW1vQ29tcG9uZW50L2RlbW9Db21wb25lbnRDb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9kZW1vQ29tcG9uZW50L2RlbW9Db21wb25lbnQuanMiLCJjb21wb25lbnRzL2hvbWUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCIkaHR0cCIsInNlbmRNZXNzYWdlIiwidGV4dCIsInN1Y2Nlc3NDYWxsYmFjayIsInJlc3BvbnNlIiwidm0iLCJtZXNzYWdlcyIsInB1c2giLCJkYXRhIiwiYXZhaWxhYmxlT3B0aW9ucyIsIk9QVFMiLCJlcnJvckNhbGxiYWNrIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwicG9zdCIsInRoZW4iLCJpbnB1dE1lc3NhZ2UiLCJzZW5kQ2hvc2VuT3B0aW9uIiwiY2hvc2VuT3B0aW9uIiwiY2xlYXJNZXNzYWdlcyIsInRoaXMiLCJlIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLHlCQUFBLGNBRUFDLFFBQUEsaUJBQUEscUJBQ0EsU0FBQUMsRUFBQUMsR0FFQUEsRUFBQUMsVUFBQSxLQUVBRixFQUVBRyxNQUFBLFFBQ0FDLElBQUEsSUFDQUMsWUFBQSw0QkNYQVIsUUFBQUMsT0FBQSx5QkFFQVEsVUFBQSxpQkFBQSxXQUNBLE9BQ0FDLFNBQUEsS0FDQUYsWUFBQSw4Q0FDQUcsV0FBQSwwQkFDQUMsYUFBQSxLQUNBQyxrQkFBQSxNQ1JBLFdBQ0EsWUFFQWIsU0FBQUMsT0FBQSx5QkFFQVUsV0FBQSwwQkFBQSxTQUFBRyxHQWFBLFFBQUFDLEdBQUFDLEdBS0EsUUFBQUMsR0FBQUMsR0FFQUMsRUFBQUMsU0FBQUMsS0FBQUgsRUFBQUksTUFFQUgsRUFBQUksaUJBQUFDLEVBSUEsUUFBQUMsR0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsR0FiQVAsRUFBQUMsU0FBQUMsS0FBQUwsR0FFQUYsRUFBQWUsS0FBQSxhQUFBUCxLQUFBTixJQUFBYyxLQUFBYixFQUFBUSxHQTJCQU4sRUFBQVksYUFBQSxHQUdBLFFBQUFDLEdBQUFDLEdBQ0FkLEVBQUFDLFNBQUFDLEtBQUFZLEdBRUFkLEVBQUFZLGFBQUEsR0FDQVosRUFBQUksb0JBR0EsUUFBQVcsS0FDQWYsRUFBQUMsWUFwREEsR0FBQUQsR0FBQWdCLEtBRUFYLEdBQUEsVUFBQSxVQUFBLFVBc0RBLE9BcERBTCxHQUFBSixZQUFBQSxFQUNBSSxFQUFBZSxjQUFBQSxFQUNBZixFQUFBYSxpQkFBQUEsRUFFQWIsRUFBQUMsWUFDQUQsRUFBQUksb0JBK0NBSixPQy9EQSxTQUFBbEIsR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHlCQUNBLE1BQUFtQyxHQUNBbkMsRUFBQUQsUUFBQUMsT0FBQSw0QkFFQUEsRUFBQW9DLEtBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSw4Q0FDQSw0Y0NSQSxTQUFBdEMsR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHlCQUNBLE1BQUFtQyxHQUNBbkMsRUFBQUQsUUFBQUMsT0FBQSw0QkFFQUEsRUFBQW9DLEtBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSx1QkFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcsIFsndWkucm91dGVyJ10pXHJcblxyXG4uY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJyxcclxuICAgIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG5cclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvaG9tZS5odG1sJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcpXHJcblxyXG4uZGlyZWN0aXZlKCdkZW1vQ29tcG9uZW50JywgW2Z1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGVtb0NvbXBvbmVudC9kZW1vQ29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgIFx0Y29udHJvbGxlcjogJ0RlbW9Db21wb25lbnRDb250cm9sbGVyJyxcclxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTsiLCIoZnVuY3Rpb24oKXtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXIubW9kdWxlKCdoZWFsdGh5R3VscEFuZ3VsYXJBcHAnKVxyXG5cclxuXHQuY29udHJvbGxlcignRGVtb0NvbXBvbmVudENvbnRyb2xsZXInLCBmdW5jdGlvbigkaHR0cCl7XHJcblxyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHJcblx0XHR2YXIgT1BUUyA9IFsnT3B0aW9uMScsICdPcHRpb24yJywgJ09wdGlvbjMnXTtcclxuXHJcblx0XHR2bS5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xyXG5cdFx0dm0uY2xlYXJNZXNzYWdlcyA9IGNsZWFyTWVzc2FnZXM7XHJcblx0XHR2bS5zZW5kQ2hvc2VuT3B0aW9uID0gc2VuZENob3Nlbk9wdGlvbjtcclxuXHJcblx0XHR2bS5tZXNzYWdlcyA9IFtdO1xyXG5cdFx0dm0uYXZhaWxhYmxlT3B0aW9ucyA9IFtdO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHNlbmRNZXNzYWdlKHRleHQpIHtcclxuXHRcdFx0dm0ubWVzc2FnZXMucHVzaCh0ZXh0KTtcclxuXHJcblx0XHRcdCRodHRwLnBvc3QoJy9kb25hbGJvdCcsIHsgZGF0YTogdGV4dCB9KS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcclxuXHJcblx0XHRcdFx0dm0ubWVzc2FnZXMucHVzaChyZXNwb25zZS5kYXRhKTtcclxuXHJcblx0XHRcdFx0dm0uYXZhaWxhYmxlT3B0aW9ucyA9IE9QVFM7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycm9yKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyAkaHR0cCh7XHJcblx0XHRcdC8vIFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdC8vIFx0dXJsOiAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzLzEnXHJcblx0XHRcdC8vIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcblxyXG5cdFx0XHQvLyBcdHZtLm1lc3NhZ2VzLnB1c2gocmVzcG9uc2UuZGF0YSk7XHJcblxyXG5cdFx0XHQvLyBcdHZtLmF2YWlsYWJsZU9wdGlvbnMgPSBPUFRTO1xyXG5cclxuXHRcdFx0Ly8gfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xyXG5cdFx0XHQvLyBcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0Ly8gfSk7XHJcblxyXG5cdFx0XHR2bS5pbnB1dE1lc3NhZ2UgPSAnJztcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzZW5kQ2hvc2VuT3B0aW9uKGNob3Nlbk9wdGlvbikge1xyXG5cdFx0XHR2bS5tZXNzYWdlcy5wdXNoKGNob3Nlbk9wdGlvbik7XHJcblxyXG5cdFx0XHR2bS5pbnB1dE1lc3NhZ2UgPSAnJztcdFxyXG5cdFx0XHR2bS5hdmFpbGFibGVPcHRpb25zID0gW107XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2xlYXJNZXNzYWdlcygpIHtcclxuXHRcdFx0dm0ubWVzc2FnZXMgPSBbXTtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cmV0dXJuIHZtO1xyXG5cdH0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaGVhbHRoeUd1bHBBbmd1bGFyQXBwJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdoZWFsdGh5R3VscEFuZ3VsYXJBcHAnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbXBvbmVudHMvZGVtb0NvbXBvbmVudC9kZW1vQ29tcG9uZW50Lmh0bWwnLFxuICAgICc8cCBuZy1yZXBlYXQ9XCJtZXNzYWdlIGluIHZtLm1lc3NhZ2VzXCI+e3ttZXNzYWdlfX08L3A+PGZvcm0gbm92YWxpZGF0ZSBjbGFzcz1cInNpbXBsZS1mb3JtXCI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ2bS5pbnB1dE1lc3NhZ2VcIj48YnI+PGJ1dHRvbiBuZy1yZXBlYXQ9XCJhdmFpbGFibGVPcHRpb24gaW4gdm0uYXZhaWxhYmxlT3B0aW9uc1wiIG5nLWNsaWNrPVwidm0uc2VuZENob3Nlbk9wdGlvbihhdmFpbGFibGVPcHRpb24pXCI+e3thdmFpbGFibGVPcHRpb259fTwvYnV0dG9uPiA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIG5nLWNsaWNrPVwidm0uc2VuZE1lc3NhZ2Uodm0uaW5wdXRNZXNzYWdlKVwiIG5nLWRpc2FibGVkPVwiIXZtLmlucHV0TWVzc2FnZVwiIHZhbHVlPVwiU2VuZFwiPjwvZm9ybT48YnV0dG9uIG5nLWNsaWNrPVwidm0uY2xlYXJNZXNzYWdlcygpXCI+Q2xlYXIgU2NyZWVuPC9idXR0b24+Jyk7XG59XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaGVhbHRoeUd1bHBBbmd1bGFyQXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL2hvbWUuaHRtbCcsXG4gICAgJzxwPjwvcD48ZGl2IGRlbW8tY29tcG9uZW50PjwvZGl2PjxwPjwvcD4nKTtcbn1dKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
