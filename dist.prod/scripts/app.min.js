angular.module("healthyGulpAngularApp",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,n){n.otherwise("/"),e.state("home",{url:"/",templateUrl:"components/home.html"})}]),angular.module("healthyGulpAngularApp").directive("demoComponent",[function(){return{restrict:"AE",templateUrl:"components/demoComponent/demoComponent.html",controller:"DemoComponentController",controllerAs:"vm",bindToController:!0}}]),function(){"use strict";angular.module("healthyGulpAngularApp").controller("DemoComponentController",function(e){function n(n){function t(e){a.messages.push(e.data),a.availableOptions=l}function o(e){console.log(e)}a.messages.push(n);var s={};s.msgdata=n,e.post("/donalbot",s).then(t,o),a.inputMessage=""}function t(e){a.messages.push(e),a.inputMessage="",a.availableOptions=[]}function o(){a.messages=[]}var a=this,l=["Option1","Option2","Option3"];return a.sendMessage=n,a.clearMessages=o,a.sendChosenOption=t,a.messages=[],a.availableOptions=[],a})}(),function(e){try{e=angular.module("healthyGulpAngularApp")}catch(n){e=angular.module("healthyGulpAngularApp",[])}e.run(["$templateCache",function(e){e.put("components/demoComponent/demoComponent.html",'<p ng-repeat="message in vm.messages">{{message}}</p><form novalidate class="simple-form"><input type="text" ng-model="vm.inputMessage"><br><button ng-repeat="availableOption in vm.availableOptions" ng-click="vm.sendChosenOption(availableOption)">{{availableOption}}</button> <input type="submit" ng-click="vm.sendMessage(vm.inputMessage)" ng-disabled="!vm.inputMessage" value="Send"></form><button ng-click="vm.clearMessages()">Clear Screen</button>')}])}(),function(e){try{e=angular.module("healthyGulpAngularApp")}catch(n){e=angular.module("healthyGulpAngularApp",[])}e.run(["$templateCache",function(e){e.put("components/home.html","<p></p><div demo-component></div><p></p>")}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImNvbXBvbmVudHMvZGVtb0NvbXBvbmVudC9kZW1vQ29tcG9uZW50RGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy9kZW1vQ29tcG9uZW50L2RlbW9Db21wb25lbnRDb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9kZW1vQ29tcG9uZW50L2RlbW9Db21wb25lbnQuanMiLCJjb21wb25lbnRzL2hvbWUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCIkaHR0cCIsInNlbmRNZXNzYWdlIiwidGV4dCIsInN1Y2Nlc3NDYWxsYmFjayIsInJlc3BvbnNlIiwidm0iLCJtZXNzYWdlcyIsInB1c2giLCJkYXRhIiwiYXZhaWxhYmxlT3B0aW9ucyIsIk9QVFMiLCJlcnJvckNhbGxiYWNrIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiYWpheERhdGEiLCJtc2dkYXRhIiwicG9zdCIsInRoZW4iLCJpbnB1dE1lc3NhZ2UiLCJzZW5kQ2hvc2VuT3B0aW9uIiwiY2hvc2VuT3B0aW9uIiwiY2xlYXJNZXNzYWdlcyIsInRoaXMiLCJlIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLHlCQUFBLGNBRUFDLFFBQUEsaUJBQUEscUJBQ0EsU0FBQUMsRUFBQUMsR0FFQUEsRUFBQUMsVUFBQSxLQUVBRixFQUVBRyxNQUFBLFFBQ0FDLElBQUEsSUFDQUMsWUFBQSw0QkNYQVIsUUFBQUMsT0FBQSx5QkFFQVEsVUFBQSxpQkFBQSxXQUNBLE9BQ0FDLFNBQUEsS0FDQUYsWUFBQSw4Q0FDQUcsV0FBQSwwQkFDQUMsYUFBQSxLQUNBQyxrQkFBQSxNQ1JBLFdBQ0EsWUFFQWIsU0FBQUMsT0FBQSx5QkFFQVUsV0FBQSwwQkFBQSxTQUFBRyxHQWFBLFFBQUFDLEdBQUFDLEdBV0EsUUFBQUMsR0FBQUMsR0FFQUMsRUFBQUMsU0FBQUMsS0FBQUgsRUFBQUksTUFFQUgsRUFBQUksaUJBQUFDLEVBSUEsUUFBQUMsR0FBQUMsR0FDQUMsUUFBQUMsSUFBQUYsR0FuQkFQLEVBQUFDLFNBQUFDLEtBQUFMLEVBRUEsSUFBQWEsS0FDQUEsR0FBQUMsUUFBQWQsRUFLQUYsRUFBQWlCLEtBQUEsWUFBQUYsR0FBQUcsS0FBQWYsRUFBQVEsR0EyQkFOLEVBQUFjLGFBQUEsR0FHQSxRQUFBQyxHQUFBQyxHQUNBaEIsRUFBQUMsU0FBQUMsS0FBQWMsR0FFQWhCLEVBQUFjLGFBQUEsR0FDQWQsRUFBQUksb0JBR0EsUUFBQWEsS0FDQWpCLEVBQUFDLFlBMURBLEdBQUFELEdBQUFrQixLQUVBYixHQUFBLFVBQUEsVUFBQSxVQTREQSxPQTFEQUwsR0FBQUosWUFBQUEsRUFDQUksRUFBQWlCLGNBQUFBLEVBQ0FqQixFQUFBZSxpQkFBQUEsRUFFQWYsRUFBQUMsWUFDQUQsRUFBQUksb0JBcURBSixPQ3JFQSxTQUFBbEIsR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHlCQUNBLE1BQUFxQyxHQUNBckMsRUFBQUQsUUFBQUMsT0FBQSw0QkFFQUEsRUFBQXNDLEtBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSw4Q0FDQSw0Y0NSQSxTQUFBeEMsR0FDQSxJQUNBQSxFQUFBRCxRQUFBQyxPQUFBLHlCQUNBLE1BQUFxQyxHQUNBckMsRUFBQUQsUUFBQUMsT0FBQSw0QkFFQUEsRUFBQXNDLEtBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSx1QkFDQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcsIFsndWkucm91dGVyJ10pXHJcblxyXG4uY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJyxcclxuICAgIGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG5cclxuICAgICAgICAkc3RhdGVQcm92aWRlclxyXG5cclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvaG9tZS5odG1sJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcpXHJcblxyXG4uZGlyZWN0aXZlKCdkZW1vQ29tcG9uZW50JywgW2Z1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUUnLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZGVtb0NvbXBvbmVudC9kZW1vQ29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgIFx0Y29udHJvbGxlcjogJ0RlbW9Db21wb25lbnRDb250cm9sbGVyJyxcclxuXHRcdFx0Y29udHJvbGxlckFzOiAndm0nLFxyXG5cdFx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgIH1dKTsiLCIoZnVuY3Rpb24oKXtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXIubW9kdWxlKCdoZWFsdGh5R3VscEFuZ3VsYXJBcHAnKVxyXG5cclxuXHQuY29udHJvbGxlcignRGVtb0NvbXBvbmVudENvbnRyb2xsZXInLCBmdW5jdGlvbigkaHR0cCl7XHJcblxyXG5cdFx0dmFyIHZtID0gdGhpcztcclxuXHJcblx0XHR2YXIgT1BUUyA9IFsnT3B0aW9uMScsICdPcHRpb24yJywgJ09wdGlvbjMnXTtcclxuXHJcblx0XHR2bS5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlO1xyXG5cdFx0dm0uY2xlYXJNZXNzYWdlcyA9IGNsZWFyTWVzc2FnZXM7XHJcblx0XHR2bS5zZW5kQ2hvc2VuT3B0aW9uID0gc2VuZENob3Nlbk9wdGlvbjtcclxuXHJcblx0XHR2bS5tZXNzYWdlcyA9IFtdO1xyXG5cdFx0dm0uYXZhaWxhYmxlT3B0aW9ucyA9IFtdO1xyXG5cclxuXHRcdGZ1bmN0aW9uIHNlbmRNZXNzYWdlKHRleHQpIHtcclxuXHRcdFx0dm0ubWVzc2FnZXMucHVzaCh0ZXh0KTtcclxuXHJcblx0XHRcdHZhciBhamF4RGF0YSA9IHt9O1xyXG5cdFx0XHRhamF4RGF0YS5tc2dkYXRhID0gdGV4dDtcclxuXHRcdFx0Ly8gaWYgKGNvbnRleHRkYXRhKSB7XHJcblx0XHRcdC8vIFx0YWpheERhdGEuY29udGV4dCA9IGNvbnRleHRkYXRhO1xyXG5cdFx0XHQvLyB9XHJcblxyXG5cdFx0XHQkaHR0cC5wb3N0KCcvZG9uYWxib3QnLCBhamF4RGF0YSkudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcblxyXG5cdFx0XHRcdHZtLm1lc3NhZ2VzLnB1c2gocmVzcG9uc2UuZGF0YSk7XHJcblxyXG5cdFx0XHRcdHZtLmF2YWlsYWJsZU9wdGlvbnMgPSBPUFRTO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gJGh0dHAoe1xyXG5cdFx0XHQvLyBcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHQvLyBcdHVybDogJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cy8xJ1xyXG5cdFx0XHQvLyB9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xyXG5cclxuXHRcdFx0Ly8gXHR2bS5tZXNzYWdlcy5wdXNoKHJlc3BvbnNlLmRhdGEpO1xyXG5cclxuXHRcdFx0Ly8gXHR2bS5hdmFpbGFibGVPcHRpb25zID0gT1BUUztcclxuXHJcblx0XHRcdC8vIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcclxuXHRcdFx0Ly8gXHRjb25zb2xlLmxvZyhlcnJvcik7XHJcblx0XHRcdC8vIH0pO1xyXG5cclxuXHRcdFx0dm0uaW5wdXRNZXNzYWdlID0gJyc7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2VuZENob3Nlbk9wdGlvbihjaG9zZW5PcHRpb24pIHtcclxuXHRcdFx0dm0ubWVzc2FnZXMucHVzaChjaG9zZW5PcHRpb24pO1xyXG5cclxuXHRcdFx0dm0uaW5wdXRNZXNzYWdlID0gJyc7XHRcclxuXHRcdFx0dm0uYXZhaWxhYmxlT3B0aW9ucyA9IFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGNsZWFyTWVzc2FnZXMoKSB7XHJcblx0XHRcdHZtLm1lc3NhZ2VzID0gW107XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHJldHVybiB2bTtcclxuXHR9KTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnaGVhbHRoeUd1bHBBbmd1bGFyQXBwJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCdjb21wb25lbnRzL2RlbW9Db21wb25lbnQvZGVtb0NvbXBvbmVudC5odG1sJyxcbiAgICAnPHAgbmctcmVwZWF0PVwibWVzc2FnZSBpbiB2bS5tZXNzYWdlc1wiPnt7bWVzc2FnZX19PC9wPjxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidm0uaW5wdXRNZXNzYWdlXCI+PGJyPjxidXR0b24gbmctcmVwZWF0PVwiYXZhaWxhYmxlT3B0aW9uIGluIHZtLmF2YWlsYWJsZU9wdGlvbnNcIiBuZy1jbGljaz1cInZtLnNlbmRDaG9zZW5PcHRpb24oYXZhaWxhYmxlT3B0aW9uKVwiPnt7YXZhaWxhYmxlT3B0aW9ufX08L2J1dHRvbj4gPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBuZy1jbGljaz1cInZtLnNlbmRNZXNzYWdlKHZtLmlucHV0TWVzc2FnZSlcIiBuZy1kaXNhYmxlZD1cIiF2bS5pbnB1dE1lc3NhZ2VcIiB2YWx1ZT1cIlNlbmRcIj48L2Zvcm0+PGJ1dHRvbiBuZy1jbGljaz1cInZtLmNsZWFyTWVzc2FnZXMoKVwiPkNsZWFyIFNjcmVlbjwvYnV0dG9uPicpO1xufV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdoZWFsdGh5R3VscEFuZ3VsYXJBcHAnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2hlYWx0aHlHdWxwQW5ndWxhckFwcCcsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnY29tcG9uZW50cy9ob21lLmh0bWwnLFxuICAgICc8cD48L3A+PGRpdiBkZW1vLWNvbXBvbmVudD48L2Rpdj48cD48L3A+Jyk7XG59XSk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
